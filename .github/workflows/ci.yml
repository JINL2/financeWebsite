name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: pdo, pdo_pgsql, curl, json
        tools: composer

    - name: Validate composer.json and composer.lock
      run: |
        if [ -f composer.json ]; then
          composer validate --strict
        fi

    - name: Install dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --prefer-dist --no-progress
        fi

    - name: Check PHP syntax
      run: find . -name "*.php" -exec php -l {} \;

    - name: Run security checks
      run: |
        # Check for common security issues
        if grep -r "password.*=" . --include="*.php" --exclude-dir=vendor; then
          echo "WARNING: Potential hardcoded passwords found"
        fi
        if grep -r "api.*key.*=" . --include="*.php" --exclude-dir=vendor; then
          echo "WARNING: Potential hardcoded API keys found"
        fi

    - name: Check for .env file
      run: |
        if [ -f .env ]; then
          echo "ERROR: .env file should not be committed"
          exit 1
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Add your deployment steps here"
        # Example: Deploy to your hosting provider
        # ssh user@server 'cd /path/to/app && git pull && ./setup.sh'
